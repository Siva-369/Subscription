{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SIVANAND\\\\OneDrive - Capgemini\\\\Desktop\\\\Subscribe\\\\frontend\\\\src\\\\NotificationScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { View, Text, FlatList, Button, ActivityIndicator, Alert } from 'react-native';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationScreen = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // Replace the URL with your Vercel backend URL\n  const API_URL = 'https://your-backend.vercel.app/api/notifications';\n  const fetchNotifications = async () => {\n    try {\n      const response = await axios.get(API_URL);\n      setNotifications(response.data);\n      setError('');\n    } catch (err) {\n      console.error('Failed to fetch notifications:', err);\n      setError('Failed to load notifications');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await axios.patch(`${API_URL}/${notificationId}/markAsRead`);\n      setNotifications(prevNotifications => prevNotifications.map(notification => notification._id === notificationId ? {\n        ...notification,\n        read: true\n      } : notification));\n      Alert.alert('Success', 'Notification marked as read');\n    } catch (err) {\n      console.error('Failed to mark as read:', err);\n      Alert.alert('Error', 'Failed to mark notification as read');\n    }\n  };\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(View, {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      style: {\n        fontSize: 18,\n        fontWeight: 'bold',\n        marginBottom: 10\n      },\n      children: \"Your Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), error ? /*#__PURE__*/_jsxDEV(Text, {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(FlatList, {\n      data: notifications,\n      keyExtractor: item => item._id,\n      renderItem: _ref => {\n        let {\n          item\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(View, {\n          style: {\n            padding: 15,\n            marginBottom: 10,\n            backgroundColor: item.read ? '#e0e0e0' : '#f9f9f9',\n            borderRadius: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            style: {\n              fontSize: 16\n            },\n            children: item.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            title: \"Mark as Read\",\n            onPress: () => markAsRead(item._id),\n            disabled: item.read\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationScreen, \"AS6q/RMxLSF4b91ocJSzqFAqRUg=\");\n_c = NotificationScreen;\nexport default NotificationScreen;\nvar _c;\n$RefreshReg$(_c, \"NotificationScreen\");","map":{"version":3,"names":["React","useEffect","useState","View","Text","FlatList","Button","ActivityIndicator","Alert","axios","jsxDEV","_jsxDEV","NotificationScreen","_s","notifications","setNotifications","loading","setLoading","error","setError","API_URL","fetchNotifications","response","get","data","err","console","markAsRead","notificationId","patch","prevNotifications","map","notification","_id","read","alert","size","color","fileName","_jsxFileName","lineNumber","columnNumber","style","padding","children","fontSize","fontWeight","marginBottom","keyExtractor","item","renderItem","_ref","backgroundColor","borderRadius","message","title","onPress","disabled","_c","$RefreshReg$"],"sources":["C:/Users/SIVANAND/OneDrive - Capgemini/Desktop/Subscribe/frontend/src/NotificationScreen.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { View, Text, FlatList, Button, ActivityIndicator, Alert } from 'react-native';\r\nimport axios from 'axios';\r\n\r\nconst NotificationScreen = () => {\r\n    const [notifications, setNotifications] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n\r\n    // Replace the URL with your Vercel backend URL\r\n    const API_URL = 'https://your-backend.vercel.app/api/notifications';\r\n\r\n    const fetchNotifications = async () => {\r\n        try {\r\n            const response = await axios.get(API_URL);\r\n            setNotifications(response.data);\r\n            setError('');\r\n        } catch (err) {\r\n            console.error('Failed to fetch notifications:', err);\r\n            setError('Failed to load notifications');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const markAsRead = async (notificationId) => {\r\n        try {\r\n            await axios.patch(`${API_URL}/${notificationId}/markAsRead`);\r\n            setNotifications((prevNotifications) =>\r\n                prevNotifications.map((notification) =>\r\n                    notification._id === notificationId ? { ...notification, read: true } : notification\r\n                )\r\n            );\r\n            Alert.alert('Success', 'Notification marked as read');\r\n        } catch (err) {\r\n            console.error('Failed to mark as read:', err);\r\n            Alert.alert('Error', 'Failed to mark notification as read');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchNotifications();\r\n    }, []);\r\n\r\n    if (loading) {\r\n        return <ActivityIndicator size=\"large\" color=\"#0000ff\" />;\r\n    }\r\n\r\n    return (\r\n        <View style={{ padding: 20 }}>\r\n            <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>Your Notifications</Text>\r\n            {error ? (\r\n                <Text style={{ color: 'red' }}>{error}</Text>\r\n            ) : (\r\n                <FlatList\r\n                    data={notifications}\r\n                    keyExtractor={(item) => item._id}\r\n                    renderItem={({ item }) => (\r\n                        <View style={{\r\n                            padding: 15,\r\n                            marginBottom: 10,\r\n                            backgroundColor: item.read ? '#e0e0e0' : '#f9f9f9',\r\n                            borderRadius: 5,\r\n                        }}>\r\n                            <Text style={{ fontSize: 16 }}>{item.message}</Text>\r\n                            <Button\r\n                                title=\"Mark as Read\"\r\n                                onPress={() => markAsRead(item._id)}\r\n                                disabled={item.read}\r\n                            />\r\n                        </View>\r\n                    )}\r\n                />\r\n            )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default NotificationScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}